<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Wordpress on Gharib Personal Blog</title>
    <link>https://ghariib.ir/categories/wordpress/</link>
    <description>Recent content in Wordpress on Gharib Personal Blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <copyright>Alireza Gharib. All right reserved</copyright>
    <lastBuildDate>Wed, 22 Jan 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://ghariib.ir/categories/wordpress/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>6 ways to enumerate WordPress Users</title>
      <link>https://ghariib.ir/posts/6-ways-to-enumerate-wordpress-users/</link>
      <pubDate>Wed, 22 Jan 2025 00:00:00 +0000</pubDate>
      <guid>https://ghariib.ir/posts/6-ways-to-enumerate-wordpress-users/</guid>
      <description>&lt;p&gt;&#xD;&#xA;&lt;figure&gt;&#xD;&#xA;  &lt;img src=&#34;https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiJW387o-w66SJCmapiPp1JyKIgrFc25ZssYt1MFXl8forkpqmrZdyfIUGooaYM90l3QAxm-dEmDCDtaI7uWvO1hqYckKc1NL3IkIBjze0kasHT9EwO8obqr_mJpzcdc6XpOWyzhOokVdih0YIvud6LEGNHgozLyL7WMllxtmplkE0rEQh42FSxsp28kA/s320/wordpress-bypass_crop%5B1%5D.png&#34; alt=&#34;&#34; /&gt;&#xD;&#xA;&lt;/figure&gt;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&lt;/p&gt;&#xA;&lt;p&gt;If you are testing the security of WordPress websites, you will likely have to look at the REST endpoints. By default, users can be listed with the route “/wp-json/wp/v2/users”. On the latest WordPress version, out of the box, you will get the username and the hashed email. Experienced WordPress administrators and users are aware of the potential disclosure. Therefore, we can see various tutorials online on how to hide this information. The recommended ways are either to disable the REST API completely,&lt;br&gt;&#xA;install a security plugin which disables the specific route or block specific request paths.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Emails Disclosure on WordPress</title>
      <link>https://ghariib.ir/posts/emails-disclosure-on-wordpress/</link>
      <pubDate>Wed, 22 Jan 2025 00:00:00 +0000</pubDate>
      <guid>https://ghariib.ir/posts/emails-disclosure-on-wordpress/</guid>
      <description>&lt;p&gt;&#xD;&#xA;&lt;figure&gt;&#xD;&#xA;  &lt;img src=&#34;https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgq2xqKk1ubaVqsHfi6sEA09BIrKp0tq5owY7LB4nlg8eNKmroRMqHEqFoTabFGi0ZLEQYie07RtSjDbve08MCwVdLisOINcEcnNfcPkHmWCRgAJXyMBOmDRhEc_o5G-ZRKVnxJbtBiMeaK/s320/blog-email-disclosure-wordpress-image-1%255B1%255D.jpg&#34; alt=&#34;&#34; /&gt;&#xD;&#xA;&lt;/figure&gt;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&lt;/p&gt;&#xA;&lt;p&gt;Password brute force is one of the common most attack on WordPress. Only a few hours after the deployment of a new blog, we can see login attempts to /xmlrpc.php or /wp-login.php endpoints. While not being sophisticated, they remain strong attacks as they put pressure on the limited complexity passwords and potential password reuse from users. In this article, we are going to explain how the public&lt;/p&gt;&#xA;&lt;p&gt;wordpress.com REST API makes it easier for brute-force attacks on millions of WordPress instances managed by wordpress.com or private instances with the Jetpack plugin installed.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
