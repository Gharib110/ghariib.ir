<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mobile-Security on Gharib Personal Blog</title>
    <link>https://ghariib.ir/categories/mobile-security/</link>
    <description>Recent content in Mobile-Security on Gharib Personal Blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <copyright>Alireza Gharib. All right reserved</copyright>
    <lastBuildDate>Wed, 19 Mar 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://ghariib.ir/categories/mobile-security/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>&lt;div&gt;iPhone &amp; Android Users: A Major Privacy Upgrade is Coming Soon&lt;/div&gt;</title>
      <link>https://ghariib.ir/posts/iphone-android-users-a-major-privacy-upgrade-is-coming-soon/</link>
      <pubDate>Wed, 19 Mar 2025 00:00:00 +0000</pubDate>
      <guid>https://ghariib.ir/posts/iphone-android-users-a-major-privacy-upgrade-is-coming-soon/</guid>
      <description>&lt;p&gt;This breakthrough will finally allow secure, encrypted messaging between different mobile platforms.&lt;/p&gt;&#xA;&lt;p&gt;Go to Source&lt;/p&gt;</description>
    </item>
    <item>
      <title>Bypassing Certificate Pinning on Flutter-based Android Apps. A new guide.</title>
      <link>https://ghariib.ir/posts/bypassing-certificate-pinning-on-flutter-based-android-apps-a-new-guide/</link>
      <pubDate>Wed, 22 Jan 2025 00:00:00 +0000</pubDate>
      <guid>https://ghariib.ir/posts/bypassing-certificate-pinning-on-flutter-based-android-apps-a-new-guide/</guid>
      <description>&lt;p&gt;&#xD;&#xA;&lt;figure&gt;&#xD;&#xA;  &lt;img src=&#34;https://blogger.googleusercontent.com/img/a/AVvXsEiLZOgVn35LqPDpfHUk6wcqLOjrvV6JioR2CPitS6-4WhuB6jSaudX8wXAwTaHk3U7ebucLS-R5vO6GRTF2dC-cjzUcm-qv1IQLhkB-zDUYLavj06fTkgqAbwsix1lSP2klyN8rqETtdsCcQFAv_FOKE9AGSNQ0TOyi3q5sxBSkyE_lhziAZbmO1DDnroxg&#34; alt=&#34;&#34; /&gt;&#xD;&#xA;&lt;/figure&gt;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&lt;/p&gt;&#xA;&lt;p&gt;One of the preliminary activities when analyzing mobile application, &lt;em&gt;more usually than not&lt;/em&gt;, is to be able to sniff HTTP/S traffic via &lt;strong&gt;a MitM proxy&lt;/strong&gt;. &lt;/p&gt;&#xA;&lt;p&gt;This is quite straightforward in the case of naive applications, but can be quite challenging when applications use certificate pinning techniques. In this post I&amp;rsquo;ll try to explain the methodology I used to make this possible for a &lt;strong&gt;Flutter-based&lt;/strong&gt; &lt;strong&gt;Android&lt;/strong&gt; sample application in a reliable way.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Mobile Screenshot prevention Cheat Sheet - Risks and Scenarios</title>
      <link>https://ghariib.ir/posts/mobile-screenshot-prevention-cheat-sheet-risks-and-scenarios/</link>
      <pubDate>Wed, 22 Jan 2025 00:00:00 +0000</pubDate>
      <guid>https://ghariib.ir/posts/mobile-screenshot-prevention-cheat-sheet-risks-and-scenarios/</guid>
      <description>&lt;h1 id=&#34;mobile-screenshot-prevention-cheat-sheet---risks-and-scenarios&#34;&gt;Mobile Screenshot Prevention Cheat Sheet - Risks and Scenarios&lt;/h1&gt;&#xA;&lt;p&gt;The following article will try to analyze and explain risks and attack scenarios affecting mobile applications without any implemented prevention mechanism against screenshotting.&lt;/p&gt;&#xA;&lt;h2 id=&#34;briefly-what-is-the-problem&#34;&gt;Briefly, what is the problem?&lt;/h2&gt;&#xA;&lt;p&gt;Extremely summarizing, mobile applications need to implement screenshot prevention mechanisms in order to avoid an attacker to steal sensitive data, such as credentials or private information, that are shown on the screen during the application execution.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Mobile Screenshot Prevention Cheatsheet - Testing and Fixing</title>
      <link>https://ghariib.ir/posts/mobile-screenshot-prevention-cheatsheet-testing-and-fixing/</link>
      <pubDate>Wed, 22 Jan 2025 00:00:00 +0000</pubDate>
      <guid>https://ghariib.ir/posts/mobile-screenshot-prevention-cheatsheet-testing-and-fixing/</guid>
      <description>&lt;h1 id=&#34;mobile-screenshot-prevention-cheat-sheet---testing-and-fixing&#34;&gt;Mobile Screenshot Prevention Cheat Sheet - Testing and Fixing&lt;/h1&gt;&#xA;&lt;p&gt;&#xD;&#xA;&lt;figure&gt;&#xD;&#xA;  &lt;img src=&#34;https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhhKkaHBQr1Q_NduSGmMgU2g3AfrKQIy-Sa1vWprMpoDXzTXxq3DiOt5U2jcJ7vRe3CagBzuGOO0hjh9gBXJ905gdCwCJqeoQ0EPqHtKuAkRo1dOzpyk9zOZanlVUcaKxifgyTDR6x8Vjod/&#34; alt=&#34;&#34; /&gt;&#xD;&#xA;&lt;/figure&gt;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&lt;/p&gt;&#xA;&lt;p&gt;The following article will explain how to test mobile applications against any implemented screenshot prevention mechanism and then it will try to propose mitigations to such problem according to the context.&lt;/p&gt;&#xA;&lt;p&gt;The following article is the second part of &lt;strong&gt;Mobile Screenshot Prevention Cheat Sheet - Risks and Scenarios&lt;/strong&gt; published on IMQ Minded Security blog.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;TLDR&lt;/strong&gt;; None of the proposed solutions will provide a full protection against screenshotting. Therefore all of them shall be considered as mitigations.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Semgrep Rules for iOS Application Security (Swift)</title>
      <link>https://ghariib.ir/posts/semgrep-rules-for-ios-application-security-swift/</link>
      <pubDate>Wed, 22 Jan 2025 00:00:00 +0000</pubDate>
      <guid>https://ghariib.ir/posts/semgrep-rules-for-ios-application-security-swift/</guid>
      <description>&lt;p&gt;&#xD;&#xA;&lt;figure&gt;&#xD;&#xA;  &lt;img src=&#34;https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEj6C9bCj_OW9A2TBw17WVTTFITXAYIqKMz_nzV4EYVXRRdmBxh0a5XEbnmJ6h85kj2CIDlI-G1yhYYul3YQmFZR0Vh5TqNBOxEWX5jlA5hl-00x0smkwZvR59bPsu91BWMaIOGyYfys88Q3WaiopDNn8VQ0KDZOq-TP0XuJ3LXuxH9gGHU0qht15AJPBcw/w200-h155/swift_sec2.png&#34; alt=&#34;Swift_security&#34; /&gt;&#xD;&#xA;  &lt;figcaption&gt;Swift_security&lt;/figcaption&gt;&#xD;&#xA;&lt;/figure&gt;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&lt;/p&gt;&#xA;&lt;p&gt;Nowadays, millions of people rely on iOS mobile applications for almost everything. As a result iOS devices manage a significant amount of data including sensitive ones, such as: &lt;em&gt;credentials&lt;/em&gt;, &lt;em&gt;health data&lt;/em&gt;, &lt;em&gt;payment data&lt;/em&gt; and so on. &lt;/p&gt;&#xA;&lt;p&gt;For these reasons ensuring the security of iOS applications is more critical than ever when developing iOS applications. Securely handling sensitive data and minimizing vulnerabilities are essential core concepts for developers when coding iOS applications, using &lt;strong&gt;Swift&lt;/strong&gt; and &lt;strong&gt;Objective-C&lt;/strong&gt; languages.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
