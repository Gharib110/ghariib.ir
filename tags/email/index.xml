<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Email on Gharib Personal Blog</title>
    <link>https://ghariib.ir/tags/email/</link>
    <description>Recent content in Email on Gharib Personal Blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <copyright>Alireza Gharib. All right reserved</copyright>
    <lastBuildDate>Wed, 22 Jan 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://ghariib.ir/tags/email/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Deanonymizing LinkedIn Users</title>
      <link>https://ghariib.ir/posts/deanonymizing-linkedin-users/</link>
      <pubDate>Wed, 22 Jan 2025 00:00:00 +0000</pubDate>
      <guid>https://ghariib.ir/posts/deanonymizing-linkedin-users/</guid>
      <description>&lt;p&gt;&#xD;&#xA;&lt;figure&gt;&#xD;&#xA;  &lt;img src=&#34;https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjg7aLzYD2_lxNFbzk2uImf0Id_uOXb45d-z_mkCoZD3wcD3vMy52PtEow16K6BcXZshnhi_5fpJBmwQRxAc-suHOiIMf6ZsxtwpsjNdi0qCv93lGUoszq1uxTUFjr_SpvPcpxgfrGFRSJZ/s320/linkedin_card_v2%255B1%255D.png&#34; alt=&#34;&#34; /&gt;&#xD;&#xA;&lt;/figure&gt;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&lt;/p&gt;&#xA;&lt;p&gt;In this blog post, we will look at the privacy issues with some of LinkedIn’s external APIs. We will demonstrate how it is possible, with an email address, to find its associated LinkedIn profile. It is also possible from a LinkedIn profile to do the reverse path and find a person’s email address. To execute this deanonymization attack, documented features, like LinkedIn’s integration with Outlook and YahooMail, are used.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Emails Disclosure on WordPress</title>
      <link>https://ghariib.ir/posts/emails-disclosure-on-wordpress/</link>
      <pubDate>Wed, 22 Jan 2025 00:00:00 +0000</pubDate>
      <guid>https://ghariib.ir/posts/emails-disclosure-on-wordpress/</guid>
      <description>&lt;p&gt;&#xD;&#xA;&lt;figure&gt;&#xD;&#xA;  &lt;img src=&#34;https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgq2xqKk1ubaVqsHfi6sEA09BIrKp0tq5owY7LB4nlg8eNKmroRMqHEqFoTabFGi0ZLEQYie07RtSjDbve08MCwVdLisOINcEcnNfcPkHmWCRgAJXyMBOmDRhEc_o5G-ZRKVnxJbtBiMeaK/s320/blog-email-disclosure-wordpress-image-1%255B1%255D.jpg&#34; alt=&#34;&#34; /&gt;&#xD;&#xA;&lt;/figure&gt;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&lt;/p&gt;&#xA;&lt;p&gt;Password brute force is one of the common most attack on WordPress. Only a few hours after the deployment of a new blog, we can see login attempts to /xmlrpc.php or /wp-login.php endpoints. While not being sophisticated, they remain strong attacks as they put pressure on the limited complexity passwords and potential password reuse from users. In this article, we are going to explain how the public&lt;/p&gt;&#xA;&lt;p&gt;wordpress.com REST API makes it easier for brute-force attacks on millions of WordPress instances managed by wordpress.com or private instances with the Jetpack plugin installed.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
