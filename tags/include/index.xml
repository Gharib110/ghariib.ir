<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Include on Gharib Personal Blog</title>
    <link>https://ghariib.ir/tags/include/</link>
    <description>Recent content in Include on Gharib Personal Blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <copyright>Alireza Gharib. All right reserved</copyright>
    <lastBuildDate>Thu, 06 Feb 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://ghariib.ir/tags/include/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>How to analyze changes to enum types using abidiff</title>
      <link>https://ghariib.ir/posts/how-to-analyze-changes-to-enum-types-using-abidiff/</link>
      <pubDate>Thu, 06 Feb 2025 00:00:00 +0000</pubDate>
      <guid>https://ghariib.ir/posts/how-to-analyze-changes-to-enum-types-using-abidiff/</guid>
      <description>&lt;p&gt;It is required to have a stable  application binary interface (ABI) when maintaining a stable shared library that is written in C or C++ and shipped as part of a complex software stack. Developers must comply with this requirement. When building a newer version of a shared library, developers may try the following approach:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Analyze the ABI changes.&lt;/li&gt;&#xA;&lt;li&gt;Detect the potential incompatibility of the changes, or ABI breaks.&lt;/li&gt;&#xA;&lt;li&gt;Fix them before releasing the library.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;To perform the analysis, developers can use the abidiff tool to compare the newer version of the shared library against the previous stable version. The abidiff tool is part of the libabigail framework. It reports the ABI changes to data types and how they impact the functions of variables.&lt;/p&gt;</description>
    </item>
    <item>
      <title>How to implement C23 #embed in GCC 15</title>
      <link>https://ghariib.ir/posts/how-to-implement-c23-embed-in-gcc-15/</link>
      <pubDate>Sat, 01 Feb 2025 00:00:00 +0000</pubDate>
      <guid>https://ghariib.ir/posts/how-to-implement-c23-embed-in-gcc-15/</guid>
      <description>&lt;p&gt;GCC 15 is expected to be released in April or May 2025. To speed up compilation, consider using the &lt;code&gt;#embed&lt;/code&gt; directive for programs which need to include larger binary data. Even programs using large array initializers may encounter nice compilation time speedups when using the new GCC version. This article discusses the inclusion of binary data in C as well as &lt;code&gt;#embed&lt;/code&gt; implementation in GCC 15.&lt;/p&gt;&#xA;&lt;h2 id=&#34;4-methods-to-add-binary-data&#34;&gt;4 methods to add binary data&lt;/h2&gt;&#xA;&lt;p&gt;Various C/C++ programs need to include binary data in their binaries or shared libraries. There have been ways to achieve this with a few drawbacks.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
