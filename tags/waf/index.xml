<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Waf on Gharib Personal Blog</title>
    <link>https://ghariib.ir/tags/waf/</link>
    <description>Recent content in Waf on Gharib Personal Blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <copyright>Alireza Gharib. All right reserved</copyright>
    <lastBuildDate>Wed, 22 Jan 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://ghariib.ir/tags/waf/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Bypassing ModSecurity WAF</title>
      <link>https://ghariib.ir/posts/bypassing-modsecurity-waf/</link>
      <pubDate>Wed, 22 Jan 2025 00:00:00 +0000</pubDate>
      <guid>https://ghariib.ir/posts/bypassing-modsecurity-waf/</guid>
      <description>&lt;p&gt;Being able to bypass Web Application Firewall (WAF) depends on your knowledge about their behavior. Here is a cool technique that involve &lt;strong&gt;expressions that are ignored in MySQL SQL parser&lt;/strong&gt; (MySQL &amp;lt;= 5.7). This post summarizes the impact on libinjection. The libinjection library is used by WAF such as ModSecurity and SignalScience. For more details on AWS Cloudfront impact, read the original GoSecure article.&lt;/p&gt;&#xA;&lt;p&gt;&#xD;&#xA;&lt;figure&gt;&#xD;&#xA;  &lt;img src=&#34;https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhPVnidYg-zDcbocWT8PLVe-A3XzqWbXSUIOdIu3iFJMr5MSMm9yFg3hsyGDbuWrpqbgrpUj9XY2JyIdgNJv50IlUdIgeIHjNmBjqVYz8Vz8YO-e3toUt6Bd_Dwf9etJAumCHr8Mq89KQGT/s16000/s1bwt2caxl3q8m5d3rdc%255B1%255D.jpg&#34; alt=&#34;&#34; /&gt;&#xD;&#xA;&lt;/figure&gt;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&lt;/p&gt;&#xA;&lt;h2 id=&#34;scientific-expression-in-mysql&#34;&gt;Scientific expression in MySQL&lt;/h2&gt;&#xA;&lt;p&gt;When MySQL sees &lt;code&gt;1.e(abc)&lt;/code&gt;, it will ignore the &lt;code&gt;1.e(&lt;/code&gt; portion because the following characters do not form a valid numeric value.&lt;/p&gt;</description>
    </item>
    <item>
      <title>WAF Journey - Fixing Telerik UI Remote Code Execution via Arbitrary File Upload</title>
      <link>https://ghariib.ir/posts/waf-journey-fixing-telerik-ui-remote-code-execution-via-arbitrary-file-upload/</link>
      <pubDate>Wed, 22 Jan 2025 00:00:00 +0000</pubDate>
      <guid>https://ghariib.ir/posts/waf-journey-fixing-telerik-ui-remote-code-execution-via-arbitrary-file-upload/</guid>
      <description>&lt;h3 id=&#34;introduction&#34;&gt;Introduction&lt;/h3&gt;&#xA;&lt;p&gt;It might occur that companies discover vulnerabilities on web application assets that were acquired by &lt;em&gt;third party vendors&lt;/em&gt;.&lt;/p&gt;&#xA;&lt;p&gt;What happens if the asset is no longer supported/licensed and cannot be promptly &lt;em&gt;updated&lt;/em&gt; by the organization?&lt;/p&gt;&#xA;&lt;p&gt;A viable option is by using a &lt;em&gt;Web Application Firewall&lt;/em&gt; (WAF) component using a &lt;em&gt;&lt;strong&gt;custom developed rule&lt;/strong&gt;&lt;/em&gt; to block attempts to exploit specific vulnerabilities.&lt;/p&gt;&#xA;&lt;p&gt;Even though this behavior might &lt;em&gt;not&lt;/em&gt; be the definitive solution, it allows a company to buy time to figure out how to correctly patch or, perhaps, replace the vulnerable asset.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
