<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cryptographiclibrary on Gharib Personal Blog</title>
    <link>https://ghariib.ir/tags/cryptographiclibrary/</link>
    <description>Recent content in Cryptographiclibrary on Gharib Personal Blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <copyright>Alireza Gharib. All right reserved</copyright>
    <lastBuildDate>Sun, 05 Jan 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://ghariib.ir/tags/cryptographiclibrary/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Announcing AWS KMS Elliptic Curve Diffie-Hellman (ECDH) support</title>
      <link>https://ghariib.ir/posts/announcing-aws-kms-elliptic-curve-diffie-hellman-ecdh-support/</link>
      <pubDate>Sun, 05 Jan 2025 00:00:00 +0000</pubDate>
      <guid>https://ghariib.ir/posts/announcing-aws-kms-elliptic-curve-diffie-hellman-ecdh-support/</guid>
      <description>&lt;p&gt;When using cryptography to protect data, protocol designers often prefer symmetric keys and algorithms for their speed and efficiency. However, when data is exchanged across an untrusted network such as the internet, it becomes difficult to ensure that only the exchanging parties can know the same key. Asymmetric key pairs and algorithms help to solve […]&lt;/p&gt;&#xA;&lt;p&gt;When using cryptography to protect data, protocol designers often prefer symmetric keys and algorithms for their speed and efficiency. However, when data is exchanged across an untrusted network such as the internet, it becomes difficult to ensure that &lt;em&gt;only&lt;/em&gt; the exchanging parties can know the same key. Asymmetric key pairs and algorithms help to solve this problem by allowing a public key to be shared over an untrusted network. And by using a key agreement scheme, two parties can use each other’s public key in combination with their own private key to each derive the same shared secret.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Introducing s2n-quic, a new open-source QUIC protocol implementation in Rust</title>
      <link>https://ghariib.ir/posts/introducing-s2n-quic-a-new-open-source-quic-protocol-implementation-in-rust/</link>
      <pubDate>Sun, 05 Jan 2025 00:00:00 +0000</pubDate>
      <guid>https://ghariib.ir/posts/introducing-s2n-quic-a-new-open-source-quic-protocol-implementation-in-rust/</guid>
      <description>&lt;p&gt;At Amazon Web Services (AWS), security, high performance, and strong encryption for everyone are top priorities for all our services. With these priorities in mind, less than a year after QUIC ratification in the Internet Engineering Task Force (IETF), we are introducing support for the QUIC protocol which can boost performance for web applications that […]&lt;/p&gt;&#xA;&lt;p&gt;&#xD;&#xA;&lt;figure&gt;&#xD;&#xA;  &lt;img src=&#34;https://d2908q01vomqb2.cloudfront.net/22d200f8670dbdb3e253a90eee5098477c95c23d/2022/02/17/S2N-QUIC-Blog-Announcement-Logo.png&#34; alt=&#34;&#34; /&gt;&#xD;&#xA;&lt;/figure&gt;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;At Amazon Web Services (AWS), security, high performance, and strong encryption for everyone are top priorities for all our services. With these priorities in mind, less than a year after QUIC ratification in the Internet Engineering Task Force (IETF), we are introducing support for the QUIC protocol which can boost performance for web applications that currently use Transport Layer Security (TLS) over Transmission Control Protocol (TCP). We are pleased to announce the availability of s2n-quic, an open-source Rust implementation of the QUIC protocol added to our set of AWS encryption open-source libraries.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
